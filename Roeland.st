Object subclass: #InvalidObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Roeland'!!InvalidObject methodsFor: 'as yet unclassified' stamp: 'RoelandMatthijssens 1/13/2012 14:44'!isValid	^false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!InvalidObject class	instanceVariableNames: ''!!InvalidObject class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/13/2012 14:49'!new	|instance|	instance := super new.	^instance.! !Object subclass: #ValidObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Roeland'!!ValidObject methodsFor: 'as yet unclassified' stamp: 'RoelandMatthijssens 1/13/2012 14:44'!isValid	^true.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ValidObject class	instanceVariableNames: ''!!ValidObject class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/13/2012 14:49'!new	|instance|	instance := super new.	^instance.! !ValidObject subclass: #Contestant	instanceVariableNames: 'name activeSince awards logger type'	classVariableNames: ''	poolDictionaries: ''	category: 'Roeland'!!Contestant methodsFor: 'printing' stamp: 'RoelandMatthijssens 1/13/2012 13:31'!print	Transcript show: name.! !!Contestant methodsFor: 'printing' stamp: 'RoelandMatthijssens 1/15/2012 15:03'!show	Transcript show: 'name:', name; cr.	Transcript show: 'activeSince:'.	Transcript show: activeSince; cr.	Transcript show: 'awards: [ '.	awards do: [ :award|		award print.		Transcript show: ' '.		].	Transcript show: ']'; cr.	Transcript cr.! !!Contestant methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/13/2012 01:06'!activeSince: value	activeSince := value.! !!Contestant methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/15/2012 02:23'!logger: aLogger	logger := aLogger.! !!Contestant methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/13/2012 01:05'!name: value	name := value.! !!Contestant methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/13/2012 13:47'!addAward: award	awards add: award.! !!Contestant methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 21:46'!logCreation	| logInfo |	logInfo := LoggingInfo new: #contestantCreated level:10.	logInfo addParam: #contestant value: self.	logInfo state: #success.	logger log: logInfo.! !!Contestant methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 13:44'!voteIn: award for: contestant.	award acceptVote: self votedFor: contestant.	! !!Contestant methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/13/2012 01:04'!activeSince	^activeSince! !!Contestant methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/13/2012 01:59'!awards	^awards asArray.! !!Contestant methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 02:22'!logger	^logger.! !!Contestant methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/13/2012 01:04'!name	^name! !!Contestant methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 15:28'!type	^type.! !!Contestant methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/13/2012 01:15'!initActiveSince: date	activeSince := date.! !!Contestant methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/13/2012 13:34'!initAwards	awards:=Set new.! !!Contestant methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 02:23'!initLogger: aLogger	logger := aLogger.! !!Contestant methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/13/2012 01:16'!initName: aName	name := aName.! !!Contestant methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 05:16'!initType: aType	type:=aType.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Contestant class	instanceVariableNames: ''!!Contestant class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 02:22'!new	|instance|	instance := super new.	instance initAwards.	instance initActiveSince: InvalidObject new.	instance initName: InvalidObject new.	instance 	initLogger: Logger new.	^instance.! !!Contestant class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/13/2012 13:40'!newWithName: aName	|instance|	instance := self new.	instance initName: aName.	^instance.! !!Contestant class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/13/2012 13:49'!newWithName: aName withDate: aDate	|instance|	instance := self new.	instance initName: aName.	instance initActiveSince: aDate.	^instance.! !Contestant subclass: #Artist	instanceVariableNames: 'band juryOf maxJuryOfSize'	classVariableNames: ''	poolDictionaries: ''	category: 'Roeland'!!Artist methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/14/2012 15:22'!band: aBand	band := aBand.! !!Artist methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/15/2012 16:17'!maxJuryOfSize: amount	maxJuryOfSize:=amount.! !!Artist methodsFor: 'debugging' stamp: 'RoelandMatthijssens 1/15/2012 14:27'!youngEnough	^(type ==#artist)! !!Artist methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 16:16'!initJuryOf	maxJuryOfSize := 3. 	juryOf := LinkedList new.! !!Artist methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 16:16'!enterJuryPanel: award	juryOf size >= maxJuryOfSize		ifFalse: 			[juryOf add: award.			^true]		ifTrue: [^false.].! !!Artist methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 22:07'!joinBand: aBand	aBand isValid		ifTrue: [			|logInfo|			aBand addMember: self.			logInfo := LoggingInfo new: #contestantJoinBand level:10.			logInfo addParam: #contestant value: self.			logInfo addParam: #band value: aBand.			logInfo state: #success.			logger log: logInfo.			]. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Artist class	instanceVariableNames: ''!!Artist class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 16:06'!new	|instance|	instance := super new.	instance initJuryOf.	instance initType: #artist.	^instance! !ValidObject subclass: #Validator	instanceVariableNames: 'lambda failMessage'	classVariableNames: ''	poolDictionaries: ''	category: 'Roeland'!!Validator methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/15/2012 05:06'!failMessage: message	failMessage := message.! !!Validator methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/15/2012 05:06'!lambda: aLambda	lambda:=aLambda.! !!Validator methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 05:06'!failMessage	^failMessage.! !!Validator methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 05:05'!lambda	^lambda.! !!Validator methodsFor: 'initialize' stamp: 'RoelandMatthijssens 1/15/2012 05:01'!initFailMessage: message	failMessage := message.! !!Validator methodsFor: 'initialize' stamp: 'RoelandMatthijssens 1/15/2012 05:02'!initLambda: aLambda	lambda := aLambda.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Validator class	instanceVariableNames: ''!!Validator class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 05:02'!new	|instance|	instance := super new.	instance initLambda: [^true].	instance initFailMessage: ''.	^instance.! !!Validator class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 05:02'!new: lambda	|instance|	instance := self new.	instance initLambda: lambda.	^instance.! !!Validator class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 05:11'!new: lambda failMessage: failMessage	|instance|	instance := self new: lambda.	instance initFailMessage: failMessage.	^instance.! !ValidObject subclass: #LoggingInfo	instanceVariableNames: 'key state params level'	classVariableNames: ''	poolDictionaries: ''	category: 'Roeland'!!LoggingInfo methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/15/2012 02:34'!key: aKey	key:=aKey.! !!LoggingInfo methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/15/2012 02:52'!level: value	level:=value.! !!LoggingInfo methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/15/2012 04:07'!params: paramDict	params:=paramDict.! !!LoggingInfo methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/15/2012 02:47'!state: aState	state:=aState.! !!LoggingInfo methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 01:11'!key	^key! !!LoggingInfo methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 03:13'!loggingLevel	^level.! !!LoggingInfo methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 01:11'!params	^params! !!LoggingInfo methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 02:47'!state	^state.! !!LoggingInfo methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 01:11'!initKey: aKey	key := aKey.! !!LoggingInfo methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 02:52'!initLevel: value	level:=value.! !!LoggingInfo methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 04:03'!initParams	params := Dictionary new.! !!LoggingInfo methodsFor: 'printing' stamp: 'RoelandMatthijssens 1/15/2012 03:33'!print	Transcript show: key;show: ' ';show: state;cr.! !!LoggingInfo methodsFor: 'printing' stamp: 'RoelandMatthijssens 1/15/2012 03:23'!show	Transcript show: key;show: ' ';show: level;show: ' ';show: params;cr.! !!LoggingInfo methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 03:42'!addParam: aKey value:value	params at: aKey put: value.! !!LoggingInfo methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 03:41'!get:  aKey	|value|	value := params at:aKey ifAbsent:#None.	^value.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LoggingInfo class	instanceVariableNames: ''!!LoggingInfo class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 04:03'!new: key	|instance|	instance := super new.	instance initKey: key.	instance initLevel: 0.	instance initParams.	^instance.! !!LoggingInfo class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 02:54'!new: key level: value	|instance|	instance := self new: key.	instance initLevel: value.	^instance.! !!LoggingInfo class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 02:54'!new: key params: params	|instance|	instance := self new: key.	instance initParams: params.	^instance.! !ValidObject subclass: #Logger	instanceVariableNames: 'dict defaultLambda loggingLevel'	classVariableNames: ''	poolDictionaries: ''	category: 'Roeland'!!Logger methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/15/2012 02:51'!loggingLevel: value	"we log every incomming log request if they have a smaller value than the local logginLevel."	loggingLevel := value.! !!Logger methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 00:37'!initDict	dict := Dictionary new.! !!Logger methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 01:18'!initLambda: lambda	defaultLambda := lambda.! !!Logger methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 02:57'!initLoggingLevel	loggingLevel := 0.! !!Logger methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 02:58'!initLoggingLevel: value	loggingLevel := value.! !!Logger methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 01:20'!defaultLambda	^defaultLambda.! !!Logger methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 01:20'!dict	^dict.! !!Logger methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 03:13'!loggingLevel	^loggingLevel.! !!Logger methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 02:25'!addLoggerHandle: key lambda: lambda	dict at: key put: lambda.! !!Logger methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 03:19'!log: loggingInfo	|key lambda|	key := loggingInfo key.		lambda := dict at: key ifAbsent: [defaultLambda].		loggingInfo loggingLevel <= loggingLevel		ifTrue: [lambda value: loggingInfo.].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Logger class	instanceVariableNames: ''!!Logger class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 03:23'!new	|instance|	instance := super new.	instance initDict.	instance initLoggingLevel.	instance initLambda: [:info| info print.].	^instance.! !!Logger class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 02:57'!new: level	|instance|	instance := super new.	instance initDict.	instance initLoggingLevel: level.	instance initLambda: [:params| Transcript show: params.].	^instance.! !ValidObject subclass: #Ceremony	instanceVariableNames: 'awards name date logger'	classVariableNames: ''	poolDictionaries: ''	category: 'Roeland'!!Ceremony methodsFor: 'printing' stamp: 'RoelandMatthijssens 1/13/2012 13:31'!print	Transcript show: name.! !!Ceremony methodsFor: 'printing' stamp: 'RoelandMatthijssens 1/15/2012 21:18'!show	Transcript show: 'name:', name;cr.	Transcript show: 'date:'.	Transcript show: date;cr.	Transcript show: 'awards: [ '.	awards do: [ :award|			award print.			Transcript show: ', '.			].	Transcript show: ']';cr.		Transcript cr.! !!Ceremony methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/14/2012 23:00'!awards	^awards.! !!Ceremony methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/13/2012 15:16'!date	^date.! !!Ceremony methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 02:22'!logger	^logger.! !!Ceremony methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/15/2012 02:23'!logger: aLogger	logger := aLogger.! !!Ceremony methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 21:38'!addAward: award| logInfo |	awards add: award.	award ceremony: self.		logInfo := LoggingInfo new: #ceremonyAddAward level:10.	logInfo addParam: #ceremony value: self.	logInfo addParam: #award value: award.	logInfo state: #success.	logger log: logInfo.	! !!Ceremony methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 21:12'!logCreation	| logInfo |	logInfo := LoggingInfo new: #ceremonyCreated level:10.	logInfo addParam: #ceremony value: self.	logInfo state: #success.	logger log: logInfo.! !!Ceremony methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/13/2012 15:13'!removeAward: award	|result|	result := awards remove: award ifAbsent:InvalidObject new.	result isValid		ifTrue: [result ceremony: InvalidObject new.].! !!Ceremony methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/13/2012 13:06'!initAwards	awards := Set new.! !!Ceremony methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/13/2012 15:17'!initDate: aDate	date := aDate.! !!Ceremony methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 02:23'!initLogger: aLogger	logger := aLogger.! !!Ceremony methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/13/2012 13:06'!initName: aName	name := aName.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Ceremony class	instanceVariableNames: ''!!Ceremony class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 21:17'!new	|instance|	instance := super new.	instance initName: InvalidObject new.	instance initDate: InvalidObject new.	instance 	initLogger: Logger new.	instance initAwards.	^instance.! !!Ceremony class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/13/2012 15:17'!newWithDate: aDate	|instance|	instance := self new.	instance initDate: aDate.	^instance.! !!Ceremony class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/13/2012 13:08'!newWithName: aName	|instance|	instance := self new.	instance initName: aName.	^instance.! !!Ceremony class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 21:15'!newWithName: aName date: aDate	|instance|	instance := self new.	instance initName: aName.	instance initDate: aDate.	^instance.! !ValidObject subclass: #Award	instanceVariableNames: 'name contestants date ceremony jury maxContestants maxJurySize logger validators votingEnabled maxVotes'	classVariableNames: ''	poolDictionaries: ''	category: 'Roeland'!!Award methodsFor: 'printing' stamp: 'RoelandMatthijssens 1/13/2012 13:31'!print	Transcript show: name.! !!Award methodsFor: 'printing' stamp: 'RoelandMatthijssens 1/15/2012 21:05'!show	Transcript show: 'name: ', name;cr.	Transcript show: 'date: '.	Transcript show: self date;cr.	Transcript show: 'max contestants: '.	Transcript show:  maxContestants;cr.	Transcript show: 'jury size: '.	Transcript show:  maxJurySize;cr.	Transcript show: 'contestants: [ '.	contestants do: [ :contestant|		contestant print.		Transcript show: '; '.		].	Transcript show: ']';cr.	Transcript show: 'jury: [ '.	jury do: [ :juryMember|		juryMember print.		Transcript show: '; '.		].	Transcript show: ']';cr.	Transcript cr.! !!Award methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/13/2012 15:14'!ceremony: aCeremony	aCeremony isValid 		ifTrue: [ceremony:= aCeremony.]! !!Award methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/13/2012 15:10'!changeCeremony: aCeremony	|oldCeremony| 	ceremony removeAward: self.	aCeremony addAward: self.! !!Award methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/13/2012 13:55'!date: aDate	date:= aDate.! !!Award methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/15/2012 02:23'!logger: aLogger	logger := aLogger.! !!Award methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/14/2012 23:34'!maxContestants: amount	maxContestants := amount.! !!Award methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/14/2012 23:34'!maxJurySize: amount	maxJurySize:= amount.! !!Award methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/13/2012 13:29'!name: aName	name:= aName.! !!Award methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 20:55'!acceptVote: juryMember votedFor: contestant	|votes logInfo voted |	logInfo := LoggingInfo new: #awardAcceptVote level:10.	logInfo 		addParam: #juryMember 	value: juryMember;		addParam: #award 			value: self;		addParam: #votedFor 		value: contestant.	(jury includesKey: juryMember)		ifFalse: [			logInfo addParam: #error value: 'he is not a member of the jury.'; level: 0.			logInfo state:#failure.			logger log: logInfo.			^self.			].	(jury at: juryMember) = maxVotes		ifTrue: [			logInfo addParam: #error value: 'he already voted the maximum amount.'; level: 0.			logInfo state:#failure.			logger log: logInfo.			^self.].	votingEnabled		ifTrue: [			votes := (contestants at: contestant) + 1.			voted := (jury at: juryMember) +1.			jury at: juryMember put: voted.			contestants at: contestant put: votes.			logInfo state:#success.]		ifFalse: [			logInfo addParam: #error value: 'voting was not yet enabled'; level: 0.			logInfo state:#failure.			].	logger log: logInfo.! !!Award methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 19:12'!addContestant: contestant	|logInfo|	logInfo := LoggingInfo new: #awardAddContestant level:10.	logInfo addParam: #contestant value: contestant; addParam: #award value: self.	(self validateParticipation: contestant)		ifFalse: [^self].	contestants size >= maxContestants		ifTrue:[			logInfo addParam: #error value: 'the award has reached its maximum of contestors.'.			logInfo level:0;state:#failure.			logger log: logInfo.			^self.			].	(contestants includesKey: contestant)		ifTrue: [			logInfo addParam: #error value: 'he is already a contestor'.			logInfo level:0;state:#failure.			logger log: logInfo.			^self]. 	(jury includesKey: contestant)		ifFalse: [			contestants at: contestant put: 0.			logInfo state:#success.			]		ifTrue: [			logInfo addParam: #error value: 'he is already in jury'.			logInfo level:0;state:#failure.				].	logger log:logInfo.! !!Award methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/16/2012 13:14'!addJuryMember: juryMember	|logInfo|	logInfo := LoggingInfo new: #awardAddJuryMember level:10.	logInfo addParam: #juryMember value: juryMember; addParam: #award value: self .	juryMember type = #artist		ifFalse: [			logInfo addParam: #error value: 'it is a group and not an individual artist'.			logInfo level:0;state:#failure.			logger log: logInfo.			^self]. 	(jury includesKey: juryMember)		ifTrue: [			logInfo addParam: #error value: 'he is already in the jury'.			logInfo level:0;state:#failure.			logger log: logInfo.			^self]. 	(jury size = maxJurySize)		ifTrue: [			logInfo addParam: #error value: 'the jury if full'.			logInfo level:0;state:#failure.			logger log: logInfo.			^self]. 	((contestants keys) includes: juryMember )		ifFalse: [			jury at: juryMember put: 0.			(juryMember enterJuryPanel: self)				ifTrue: [logInfo state:#success]				ifFalse:[logInfo state:#failure; level:0; addParam: #error value: 'he is already in to many jury panels']. 			]		ifTrue: [			logInfo addParam: #error value: 'already a contestant.'.			logInfo level:0;state:#failure.			].	logger log:logInfo.! !!Award methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 04:33'!addValidator: aValidator	validators add: aValidator.! !!Award methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 19:46'!declareWinner	|winner amount logInfo |	amount := -1.	self validateLegalVoting		ifFalse: [^self].	contestants keysAndValuesDo: [:contestant :votes|		amount < votes			ifTrue: [amount := votes. winner := contestant.].].	winner addAward: self.	logInfo := LoggingInfo new: #theWinnerIs level:10.	logInfo addParam: #award value: self; state:#success.	logInfo addParam: #winner value: winner.	logger log: logInfo.	^winner.! !!Award methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 13:45'!disableVoting	votingEnabled := false.! !!Award methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 20:17'!enableVoting	| logInfo |	logInfo := LoggingInfo new: #awardEnableVoting level:10.	logInfo addParam: #award value: self.	jury size = maxJurySize		ifFalse: [			logInfo				addParam: #reason value: #jurySize;				addParam: #size value: jury size;				addParam: #maxSize value: maxJurySize;				state: #failure;				level: 0.				logger log: logInfo.				^self.			].	contestants size = maxContestants		ifFalse: [			logInfo				addParam: #reason value: #contestantSize;				addParam: #size value: (contestants size);				addParam: #maxSize value: maxContestants;				state: #failure;				level: 0.				logger log: logInfo.				^self.			].	votingEnabled := true.	logInfo state: #success.	logger log: logInfo.! !!Award methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 21:33'!logCreation	| logInfo |	logInfo := LoggingInfo new: #awardCreated level:10.	logInfo addParam: #award value: self; addParam: #ceremony value: ceremony.	logInfo state: #success.	logger log: logInfo.! !!Award methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/16/2012 13:23'!validateLegalVoting	|logInfo|	logInfo := LoggingInfo new: #illigalVoting level:10.	logInfo addParam: #award value: self.	votingEnabled 		ifFalse: [^false].	jury keysAndValuesDo: [:juryMember :votes|		votes = maxVotes		ifFalse: [			logInfo				addParam: #juryMember value: juryMember;				addParam: #votes value: votes;				level: 0.			logger log: logInfo.			^false].		].	logInfo state: #success.	logger log: logInfo.	^true.! !!Award methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/15/2012 22:55'!validateParticipation: aContestant	|result|	validators do: [:validator|		|lambda|		lambda := validator lambda.		(lambda value: aContestant)		ifFalse: [			|logInfo|			logInfo := LoggingInfo new: #failedValidator level:0.			logInfo addParam: #contestant value: aContestant; addParam: #award value: self; addParam: #error value: validator failMessage. 			logger log: logInfo.			^false].		].	^true.! !!Award methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/13/2012 14:03'!ceremony 	^ceremony.! !!Award methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/13/2012 13:24'!contestants	^contestants.! !!Award methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/13/2012 15:04'!date	ceremony isValid		ifTrue: [^ceremony date.]! !!Award methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 00:29'!jury	^jury.! !!Award methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 02:22'!logger	^logger.! !!Award methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/14/2012 23:39'!maxContestants 	^maxContestants.! !!Award methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/14/2012 23:40'!maxJurySize	 ^maxJurySize.! !!Award methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/13/2012 13:23'!name	^name.! !!Award methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 13:58'!validators	^validators.! !!Award methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/13/2012 14:57'!initCeremony: aCeremony	ceremony := aCeremony.	ceremony isValid		ifTrue: [ceremony addAward: self].! !!Award methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 13:24'!initContestants: amount	contestants :=Dictionary new.	maxContestants := amount.! !!Award methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 16:42'!initJury: amount	jury :=Dictionary new.	maxJurySize := amount.! !!Award methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 02:23'!initLogger: aLogger	logger := aLogger.! !!Award methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 20:48'!initMaxVotes: amount	maxVotes := amount.! !!Award methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/13/2012 13:14'!initName: aName	name:=aName.! !!Award methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 04:27'!initValidators: aList	validators := aList.! !!Award methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 13:42'!initVotingEnabled	votingEnabled := false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Award class	instanceVariableNames: ''!!Award class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 20:48'!new	|instance|	instance := super new.	instance initName: InvalidObject new.	instance initCeremony: InvalidObject new.	instance 	initLogger: Logger new.	instance initContestants: 0.	instance initJury: 0.	instance initMaxVotes: 1.	instance initVotingEnabled.	instance initValidators: LinkedList new.	^instance.! !!Award class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 00:34'!newWithName: aName	|instance|	instance := self new.	instance initName: aName.	^instance.! !!Award class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 04:30'!newWithName: aName ceremony: aCeremony	|instance|	instance := self newWithName: aName.	instance initCeremony: aCeremony.	^instance.! !!Award class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 04:30'!newWithName: aName ceremony: aCeremony jurySize: jurySize	|instance|	instance := self newWithName: aName ceremony: aCeremony.	instance initJury: jurySize.	^instance.! !!Award class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 04:29'!newWithName: aName ceremony: aCeremony jurySize: jurySize maxContestants: maxContestants	|instance|	instance := self newWithName: aName ceremony: aCeremony jurySize: jurySize.	instance initContestants: maxContestants.	^instance.! !ValidObject subclass: #Test	instanceVariableNames: 'logger'	classVariableNames: ''	poolDictionaries: ''	category: 'Roeland'!!Test methodsFor: 'setters' stamp: 'RoelandMatthijssens 1/15/2012 03:09'!logger: aLogger	logger := aLogger.! !!Test methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/15/2012 21:50'!initLogger	logger:=Logger new.	logger loggingLevel: 10.	self fillInAwardLoggerFunctions.	self fillInCeremonyLoggerFunctions.	self fillInContestantLoggerFunctions.! !!Test methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/14/2012 22:48'!awardNames	^#( 'Record Of The Year'		 'Album Of The Year'		 'Song Of The Year'		 'Best New Artist'		 'Best Pop Solo Performance'		 'Best Pop Duo/Group Performance'		 'Best Pop Instrumental Album'		 'Best Pop Vocal Album'		 'Best Dance Recording'		 'Best Dance/Electronica Album'		 'Best Traditional Pop Vocal Album'		 'Best Rock Performance'		 'Best Hard Rock/Metal Performance'		 'Best Rock Song'		 'Best Rock Album'		 'Best Alternative Music Album'		 'Best R&B Performance'		 'Best Traditional R&B Performance'		 'Best R&B Song'		 'Best R&B Album'		 'Best Rap Performance'		 'Best Rap/Sung Collaboration'		 'Best Rap Song'		 'Best Rap Album'		 'Best Country Solo Performance'		 'Best Country Duo/Group Performance'		 'Best Country Song'		 'Best Country Album'		 'Best New Age Album'		 'Best Improvised Jazz Solo'		 'Best Jazz Vocal Album'		 'Best Jazz Instrumental Album'		 'Best Large Jazz Ensemble Album'		 'Best Gospel/Contemporary Christian Music Performance'		 'Best Gospel Song'		 'Best Contemporary Christian Music Song'		 'Best Gospel Album'		 'Best Contemporary Christian Music Album'		 'Best Regional Mexican Or Tejano Album'		 'Best Banda Or Norte񯠁lbum'		 'Best Tropical Latin Album'		 'Best Americana Album'		 'Best Bluegrass Album'		 'Best Blues Album'		 'Best Folk Album'		 'Best Regional Roots Music Album'		 'Best Reggae Album'		 'Best World Music Album'		 'Best Childrens Album'		 'Best Spoken Word Album'		 'Best Musical Theater Album'		 'Best Compilation Soundtrack For Visual Media'		 'Best Score Soundtrack For Visual Media'		 'Best Song Written For Visual Media'		 'Best Instrumental Composition'		 'Best Instrumental Arrangement'		 'Best Instrumental Arrangement Accompanying Vocalist(s)'		 'Best Recording Package'		 'Best Boxed Or Special Limited Edition Package'		 'Best Album Notes'		 'Best Historical Album'		 'Best Engineered Album, Non-Classical'		 'Producer Of The Year, Non-Classical'		 'Best Remixed Recording, Non-Classical'		 'Best Surround Sound Album'		 'Best Engineered Album, Classical'		 'Producer Of The Year, Classical'		 'Best Orchestral Performance'		 'Best Opera Recording'		 'Best Choral Performance'		 'Best Small Ensemble Performance'		 'Best Classical Instrumental Solo'		 'Best Classical Vocal Solo'		 'Best Contemporary Classical Composition'		 'Best Short Form Music Video'		 'Best Long Form Music Video' 	).! !!Test methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/14/2012 21:27'!earlyArtistNames	^#( 'Tyler, The Creator'		 'Big Sean'		 'Kreayshawn'		 'Wiz Khalifa'		 'Justin Bieber'	).! !!Test methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/14/2012 21:27'!earlyBandNames	^#( #('Foster the People'  #( 'Mark Foster' 'Cubbie Fink' 'Mark Pontius' ))		 #('The Civil Wars'  #( 'Joy Williams' 'John Paul White' ))		 #('Dale Earnhardt Jr. Jr.'  #( 'Daniel Zott' 'Joshua Epstein' ))		 #('Alabama Shakes'  #( 'Brittany Howard' 'Heath Fogg' 'Zac Cockrell' 'Steve Johnson' ))		 #('The Head and the Heart'  #( 'Jonathan Russell' 'Josiah Johnson' 'Charity Rose Thielen' 'Tyler Williams' 'Chris Zasche' 'Kenny Hensley ' ))		 #('Sallie Ford and the Sound Outside'  #( 'Sallie Ford' 'Jeff Munger' 'Ford Tennis' 'Tyler Tornfelt' ))	).! !!Test methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/14/2012 21:27'!lateArtistNames	 ^ #( 'Alicia Keys'		 'Mariah Carey'		 'George Michael'		 'Eminem'		 'Anouk'		 'James Blunt'		 'Damian Rice'		 'Jasper Steverlinck'		 'Eva Cassidy'		 'Kelly Clarkson'		 'Enya'		 'Madonna'		 'Regina Spektor'		 ).! !!Test methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/14/2012 21:27'!lateBandNames	^#( #('Beatles'  #( 'John Lennon' 'Paul McCartney' 'Ringo Starr' 'George Harrison' ))		 #('Florence and the Machine'  #( 'Florence Welch' 'Robert Ackroyd' 'Christopher Lloyd Hayden' 'Isabella Summers' 'Tom Monger' 'Mark Saunders' ))		 #('Snow Patrol'  #( 'Gary Lightbody' 'Jonny Quinn' 'Nathan Connolly' 'Paul Wilson' 'Tom Simpson' ))		 #('Editors'  #( 'Tom Smith' 'Chris Urbanowicz' 'Russell Leetch' 'Edward Lay' ))		 #('Kings of Leon'  #( 'Caleb Followill' 'Nathan Followill' 'Jared Followill' 'Matthew Followill' ))		 #('The Kooks'  #( 'Luke Pritchard' 'Hugh Harris' 'Peter Denton' 'Paul Garred' ))		 #('Mumford & Sons'  #( 'Marcus Mumford' 'Country Winston Marshall' 'Ben Lovett' 'Ted Dwane' ))	).! !!Test methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/15/2012 03:12'!logger	^logger.! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/15/2012 03:30'!addContestant: artist award: award	award addContestant: artist.! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/14/2012 23:12'!addJury: artist award: award	award addJuryMember: artist.! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/15/2012 21:08'!bigTest	|earlyBandNames earlyArtistNames	 lateBandNames  lateArtistNames	 awardNameList awards award1 artist1	 temp artists bands mtvAwards grammyAwards earlyDate lateDate toOldValidator toYoungValidator groupValidator band1 artist2 artist3 artist4 artist5 artist6 award2 award3 award4 |	Transcript clear.	earlyBandNames := self earlyBandNames.	earlyArtistNames := self earlyArtistNames.	lateBandNames := self lateBandNames.		lateArtistNames := self lateArtistNames.	awardNameList := self awardNames.	earlyDate:=Date newDay: 11 month: 2 year: 2011.		lateDate :=Date newDay: 11 month: 2 year: 2001.	temp := self createArtists: earlyArtistNames bands: earlyBandNames date: earlyDate.	artists := temp at: 1.		bands := temp at: 2.	temp := self createArtists: lateArtistNames bands: lateBandNames date: lateDate.	(temp at:1) do:[:artist| artists add: artist.].		(temp at:2) do:[:band  | bands   add: band  .].		toOldValidator := Validator new:		[:contestant| (contestant activeSince - 2009 asYear) days > 0.]		failMessage: 'he is to old'.	toYoungValidator :=  Validator new:		[:contestant| (contestant activeSince - 2010 asYear) days < 0.]		failMessage: 'he is to young'.	groupValidator:= Validator new:		[:contestant| contestant type = #group.]		failMessage: 'he did not participate in a group'.		mtvAwards := Ceremony newWithName: 'MTV Awards' date: earlyDate.	grammyAwards := Ceremony newWithName: 'Grammy Awards' date: earlyDate.	awards := self createAwards: awardNameList ceremony: mtvAwards.! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/15/2012 13:47'!createArtists: artistNameList bands: bandNameList date: aDate	"I reused the testing data from a colleague (Rik Vanmechelen)"	|artistList bandList|		artistList := LinkedList new.	bandList := LinkedList new.			artistNameList do: [ :artistName | 		|artist|		artist := Artist newWithName: artistName withDate: aDate.		artistList add: artist.		].		bandNameList do: [ :bandInfo |		|band bandName bandMembers|		bandName := bandInfo at: 1.		bandMembers := bandInfo at: 2.		band := Band newWithName: bandName withDate: aDate.		bandList add: band.		bandMembers do: [ :artistName | 			|artist|			artist := Artist newWithName: artistName withDate: aDate.			artist joinBand: band.			].		].	^[bandList, artistList].! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/15/2012 15:19'!createAwards: awardNameList ceremony: aCeremony	|awards|	awards := LinkedList new.	awardNameList do: [:awardName|		|award validator lambda failMessage|		award := Award newWithName: awardName ceremony: aCeremony jurySize: 5 maxContestants: 5.		award logger: logger.		awards add: award.		].	^awards! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/15/2012 15:17'!createAwards: awardNameList ceremony: aCeremony validator: validator	|awards|	awards := LinkedList new.	awardNameList do: [:awardName|		|award lambda failMessage|		award := Award newWithName: awardName ceremony: aCeremony jurySize: 5 maxContestants: 5.		award addValidator: validator.		award logger: logger.		awards add: award.		].	^awards! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/15/2012 03:29'!fillContestants: artistList award: award	award maxContestants timesRepeat: [		self addContestant: (artistList atRandom: Random new) award: award.		].! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/15/2012 22:53'!fillInAwardLoggerFunctions	logger addLoggerHandle: #awardCreated 		lambda: [:info|			(info get: #award) print.			Transcript show: ' award successfully created'.			Transcript cr.			].	logger addLoggerHandle: #awardAddContestant 		lambda: [:info|			info state == #success				ifTrue: [					Transcript show: 'successfully added '.					(info get: #contestant) print.					Transcript show: ' as a contestor for '.					(info get: #award) print.					Transcript cr.]				ifFalse: [					Transcript show: 'unable to add '.					(info get: #contestant) print.					Transcript show: ' as a contestor for '.					(info get: #award) print.					Transcript show: ' because '; show: (info get: #error); cr]			].	logger addLoggerHandle: #awardAddJuryMember 		lambda: [:info|			info state == #success				ifTrue: [					Transcript show: 'successfully added '.					(info get: #juryMember) print.					Transcript show: ' as jury for '.					(info get: #award) print.					Transcript cr.]				ifFalse: [					Transcript show: 'unable to add '.					(info get: #juryMember) print.					Transcript show: ' to the jury for '.					(info get: #award) print.					Transcript show: ' because '; show: (info get: #error); cr]			].		logger addLoggerHandle: #failedValidator		lambda: [:info|				Transcript show: 'unable to add '.				(info get: #contestant) print.				Transcript show: ' as a contestor to the award for '.				(info get: #award) print.				Transcript show: ' because '; show: (info get: #error); cr].		logger addLoggerHandle: #awardAcceptVote		lambda: [:info|			info state = #success			ifTrue: 				[(info get: #juryMember) print.				Transcript show: ' voted for '.				(info get: #contestant) print.				Transcript show: ' in '.				(info get: #award) print.]			ifFalse:				[(info get: #juryMember) print.				Transcript show: ' failed to voted for '.				(info get: #contestant) print.				Transcript show: ' in '.				(info get: #award) print.				Transcript show: ' because '.				Transcript show: (info get: #error)]. 			].	logger addLoggerHandle: #awardEnableVoting 		lambda: [:info|			info state == #success				ifTrue: [					Transcript show: 'successfully enabled voting for '.					(info get: #award) print.					Transcript cr.]				ifFalse: [					Transcript show: 'unable to start voting for '.					(info get: #award) print.					Transcript show: ', '.					Transcript show: (info get: #size).					Transcript show: ' of the '.					Transcript show: (info get: #maxSize).					Transcript show: ' needed '.					(info get: #reason) = #jurySize						ifTrue:  [Transcript show: 'jury members']						ifFalse: [Transcript show: 'contestants'].					Transcript show: ' are registered '; cr]			].	logger addLoggerHandle: #illigalVoting		lambda: [:info|			info state == #success				ifTrue: [					Transcript show: 'Votes for '.					(info get: #award) print.					Transcript show: ' have been counted and we are ready to declare a winner.'; cr]				ifFalse: [					Transcript show: 'unable to count votes for '.					(info get: #award) print.					Transcript show: ', '.					(info get: #juryMember) print.					Transcript show: ' cheated. He voted '.					Transcript show: (info get: #votes).					Transcript show: ' times'; cr].			].	logger addLoggerHandle: #theWinnerIs		lambda: [:info|			Transcript show: 'And the winner for '.			(info get: #award) print.			Transcript show: ' is .... Drumroll .... ';cr.			(info get: #winner) print.			Transcript show: '. Congratulations, You can come to the stage to collect your award. '; cr.			].			logger addLoggerHandle: #awardAcceptVote		lambda: [:info|			info state == #success				ifTrue: [					(info get: #juryMember) print.					Transcript show: ' voted for '.					(info get: #votedFor) print.					Transcript show: ' in '.					(info get: #award) print.					Transcript cr]				ifFalse: [					(info get: #juryMember) print.					Transcript show: ' is unable to vote for '.					(info get: #votedFor) print.					Transcript show: ' in '.					(info get: #award) print.					Transcript show: ' because '.					Transcript show: (info get: #error).					Transcript cr].			].! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/15/2012 21:40'!fillInCeremonyLoggerFunctions	logger addLoggerHandle: #ceremonyCreated lambda: [:info|		(info get: #ceremony) print.		Transcript show: ' successfully created '; cr		].			logger addLoggerHandle: #ceremonyAddAward lambda: [:info|		(info get: #award) print.		Transcript show: ' award added to '.		(info get: #ceremony) print.		Transcript cr.		]! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/15/2012 22:10'!fillInContestantLoggerFunctions	logger addLoggerHandle: #contestantCreated lambda: [:info|		|contestant|		contestant := (info get: #contestant).		contestant type == #group  ifTrue: [Transcript show: 'a group with the name '].		contestant type == #artist ifTrue: [Transcript show: 'an artist with the name '].		contestant print.
		Transcript show: ' successfully created '; cr		].	logger addLoggerHandle: #contestantJoinBand lambda: [:info|		(info get: #contestant) print.		Transcript show: ' joins the group '.		(info get: #band) print.		Transcript cr.		]  ! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/15/2012 00:30'!fillJury: artistList award: award	award maxJurySize timesRepeat: [		self addJury: (artistList atRandom: Random new) award: award.		].! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/15/2012 21:10'!run	self smallTest.! !!Test methodsFor: 'testing' stamp: 'RoelandMatthijssens 1/16/2012 13:21'!smallTest	| date ceremony bestGroup bestMicro best6Pool huk idra whiteRa destiny enermis tl eg groupValidator soloValidator youngValidator bestYoung errors |	errors := true.	Transcript clear.	date := Date newDay: 1 month: 1 year: 2012.	ceremony := Ceremony newWithName:'the Grammy Awards' date: date.	ceremony logger: logger; logCreation.	groupValidator := Validator new:[:contestant| contestant type = #group ] failMessage: 'he is not a group.' .	soloValidator  := Validator new:[:contestant| contestant type = #artist] failMessage: 'he is not an artist'.	youngValidator := Validator new:[:contestant|		((date - (contestant activeSince)) days) < (3 * (Year new daysInYear)) ]		failMessage: 'he has been in the scene to long.' .	bestMicro := Award newWithName: 'Best Micro'.		bestMicro logger: logger; logCreation;maxJurySize:3;maxContestants:2.		bestMicro addValidator: soloValidator.	bestGroup := Award newWithName: 'Best Group'.			bestGroup logger: logger; logCreation;maxJurySize:3;maxContestants:2.		bestGroup addValidator: groupValidator.	best6Pool := Award newWithName: 'Best 6-pools'.		best6Pool logger: logger; logCreation;maxJurySize:3;maxContestants:2.	bestYoung := Award newWithName: 'Best Young'.		bestYoung logger: logger; logCreation;maxJurySize:3;maxContestants:2.		bestYoung addValidator: youngValidator.		ceremony addAward: bestMicro. ceremony addAward: bestGroup. ceremony addAward: best6Pool.		huk    :=Artist newWithName:'Huk'      withDate: (2008 asYear) asDate.		huk     logger: logger;logCreation.	idra   :=Artist newWithName:'Idra'     withDate: (2009 asYear) asDate.		idra    logger: logger;logCreation.	whiteRa:=Artist newWithName:'WhiteRa'  withDate: (2010 asYear) asDate.		whiteRa logger: logger;logCreation.	destiny:=Artist newWithName:'Destiny'  withDate: (2011 asYear) asDate.		destiny logger: logger;logCreation.	enermis:=Artist newWithName:'Enermis'  withDate: (2012 asYear) asDate.		enermis logger: logger;logCreation.		tl := Band newWithName: 'TeamLiquid' withDate: (2009 asYear) asDate.		tl logger: logger;logCreation.	eg := Band newWithName: 'EvilGenius' withDate: (2009 asYear) asDate.		eg logger: logger;logCreation.		huk     joinBand: eg. "=("	idra    joinBand: eg.	whiteRa joinBand: tl.	destiny joinBand: tl.	enermis joinBand: tl.		bestMicro addContestant: huk.	bestMicro addContestant: idra.	bestGroup addContestant: tl;      addContestant: eg.	best6Pool addContestant: destiny; addContestant: eg.	errors ifTrue:[bestGroup addContestant: huk. bestMicro addContestant: tl. bestMicro addContestant: whiteRa.].	errors ifTrue:[bestMicro addJuryMember: huk. bestGroup addJuryMember: tl. bestYoung addContestant: huk.].	bestMicro addJuryMember: whiteRa; addJuryMember: destiny; addJuryMember: enermis.	bestGroup addJuryMember: huk;     addJuryMember: idra;    addJuryMember: whiteRa.	errors ifTrue: [best6Pool enableVoting].	best6Pool addJuryMember: enermis; addJuryMember: whiteRa; addJuryMember: huk.	errors ifTrue:[bestYoung addJuryMember: whiteRa. bestGroup addJuryMember: destiny.].	bestMicro enableVoting.	bestGroup enableVoting.	best6Pool enableVoting.		huk                                  voteIn: bestGroup for: tl; voteIn: best6Pool for: destiny.	idra                                 voteIn: bestGroup for: eg.	whiteRa voteIn: bestMicro for: huk;  voteIn: bestGroup for: tl; voteIn: best6Pool for: destiny.	destiny voteIn: bestMicro for: idra.	errors ifTrue: [bestMicro declareWinner]. 	enermis voteIn: bestMicro for: huk;                             voteIn: best6Pool for: eg.	errors ifTrue: [ huk voteIn: bestMicro for: huk. whiteRa voteIn: bestMicro for: huk. ].		bestMicro declareWinner.	bestGroup declareWinner.	best6Pool declareWinner.		bestYoung addContestant: enermis.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Test class	instanceVariableNames: ''!!Test class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 03:27'!new	|instance|	instance := super new.	instance initLogger.	^instance.! !Contestant subclass: #Band	instanceVariableNames: 'members'	classVariableNames: ''	poolDictionaries: ''	category: 'Roeland'!!Band methodsFor: 'printing' stamp: 'RoelandMatthijssens 1/14/2012 21:04'!show	Transcript show: 'members: [ '.	members do: [ :member|		member print.		Transcript show: ' '].	Transcript show: '].'.	super show.! !!Band methodsFor: 'getters' stamp: 'RoelandMatthijssens 1/13/2012 02:13'!awards	|totalAwards|	totalAwards := super awards.	members do: [ :member|		totalAwards := totalAwards,(member awards).		].	^totalAwards.! !!Band methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/14/2012 15:23'!addMember: artist	members add: artist.	artist band: self.! !!Band methodsFor: 'actions' stamp: 'RoelandMatthijssens 1/13/2012 01:52'!addMembers: artistList	artistList do: [ :artist|		members add: artist.		].! !!Band methodsFor: 'initializing' stamp: 'RoelandMatthijssens 1/13/2012 13:37'!initMembers	members:= Set new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Band class	instanceVariableNames: ''!!Band class methodsFor: 'instance creation' stamp: 'RoelandMatthijssens 1/15/2012 05:16'!new	|instance|	instance := super new.	instance initMembers.	instance initType: #group.	^instance.! !